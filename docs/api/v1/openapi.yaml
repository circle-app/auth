openapi: "3.0.0"
info:
  description: "Microservice oriented to authenticate users. It is based on JWT tokens."
  version: "1.0.0"
  title: "Auth"
  contact:
    email: "pando855@gmail.com"
  license:
    name: "GPL-3.0"
    url: "https://www.gnu.org/licenses/gpl-3.0.en.html"
servers:
  - url: "/v1"
tags:
- name: auth
  description: "Get a JWT token."
- name: password
  description: "Change password"
- name: user
  description: "Operations about user"
- name: ping
  description: "Test service"
paths:
  /auth:
    post:
      tags:
      - auth
      summary: "Get a JWT token for user"
      description: ""
      operationId: "auth.handlers.auth_handler"
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/User"
      responses:
        '201':
          description: successful operation
          content:
            application/json:
              schema:
                type: "object"
                properties:
                  token:
                    type: "string"
        422:
          description: "Invalid credentials"
  /user:
    post:
      security:
      - jwt: [admin]
      tags:
        - user
      summary: Create user
      description: ""
      operationId: "auth.handlers.create_user_handler"
      requestBody:
        description: Created user object
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/User'
      responses:
        '201':
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '409':
          $ref: '#/components/responses/UserAlreadyExists'
#  '/user/{username}':
#    get:
#      security:
#      - jwt: [admin]
#      tags:
#        - user
#      summary: Get user by user name
#      description: ''
#      operationId: "auth.handlers.get_user_handler"
#      parameters:
#        - name: username
#          in: path
#          description: 'The name that needs to be fetched.'
#          required: true
#          schema:
#            type: string
#            example: admin
#      responses:
#        '200':
#          description: successful operation
#          content:
#            application/json:
#              schema:
#                $ref: '#/components/schemas/User'
#        '400':
#          description: Invalid username supplied
#        '401':
#          $ref: '#/components/responses/UnauthorizedError'
#        '404':
#          description: User not found
#    put:
#      security:
#      - jwt: [admin]
#      tags:
#        - user
#      summary: Updated user
#      description: ''
#      operationId: "auth.handlers.update_user_handler"
#      parameters:
#        - name: username
#          in: path
#          description: name that need to be updated
#          required: true
#          schema:
#            type: string
#      requestBody:
#        content:
#          application/json:
#            schema:
#              $ref: '#/components/schemas/User'
#        description: Updated user object
#        required: true
#      responses:
#        '204':
#          description: "successful operation"
#        '400':
#          description: Invalid user supplied
#        '401':
#          $ref: '#/components/responses/UnauthorizedError'
#        '404':
#          description: User not found
#    delete:
#      security:
#      - jwt: [admin]
#      tags:
#        - user
#      summary: Delete user
#      description: ''
#      operationId: "auth.handlers.delete_user_handler"
#      parameters:
#        - name: username
#          in: path
#          description: The name that needs to be deleted
#          required: true
#          schema:
#            type: string
#      responses:
#        '204':
#          description: "successful operation"
#        '400':
#          description: Invalid username supplied
#        '401':
#          $ref: '#/components/responses/UnauthorizedError'
#        '404':
#          description: User not found
#
#  /password:
#    post:
#      security:
#      - jwt:
#         - user
#         - admin
#      tags:
#      - "password"
#      summary: "Update password"
#      description: ""
#      operationId: "auth.handlers.update_password_handler"
#      parameters:
#      - in: "body"
#        name: "body"
#        description: "Created user object"
#        required: true
#        schema:
#          $ref: "#/components/schemas/User"
#      responses:
#        '204':
#          description: "successful operation"
#        '401':
#          $ref: '#/components/responses/UnauthorizedError'
  /ping:
    get:
      tags:
      - ping
      summary: "Test service"
      description: ""
      operationId: "auth.handlers.ping_handler"
      responses:
        '200':
          description: successful operation
components:
  schemas:
    User:
      type: "object"
      properties:
        username:
          type: "string"
          example: admin
        password:
          type: "string"
          example: admin
  securitySchemes:
    jwt:
      type: http
      scheme: bearer
      bearerFormat: JWT
      x-bearerInfoFunc: aiolambda.security.decode_token
  responses:
    UnauthorizedError:
      description: Access token is missing or invalid
    UserAlreadyExists:
      description: User already exists
